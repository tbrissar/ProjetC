/* A simple server in the internet domain using TCP
   The port number is passed as an argument */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

void error(const char *msg)
{
    perror(msg);
    exit(1);
}

int main(int argc, char *argv[])
{
     int sockfd, newsockfd, portno;
     socklen_t clilen;//adress size
     char buffer[256];	//The server reads characters from the socket connection into this buffer
     struct sockaddr_in serv_addr, cli_addr;//contains an internet adress
     int n;//return value for the read() and write() calls = number or characters read or written
     if (argc < 2) {
         fprintf(stderr,"ERROR, no port provided\n");
         exit(1);
     }
     sockfd = socket(AF_INET, SOCK_STREAM, 0);//creates the socket, return the socket fd AF_INET:adresse domain Sock_Stream:type of the socket, last arg must be set to 0
     if (sockfd < 0)
        error("ERROR opening socket");
     bzero((char *) &serv_addr, sizeof(serv_addr));//initializes serv_addr to zeros
     portno = atoi(argv[1]);//port number atoi converts string of digits to an integer
     serv_addr.sin_family = AF_INET;//adress family
     serv_addr.sin_addr.s_addr = INADDR_ANY;//IP adress of the host=machine where server is running INADDR_ANY=constant to store this adress
     serv_addr.sin_port = htons(portno);//htons converts port number in host byte order to port number in network byte order
	//binds a socket to an adress
     if (bind(sockfd, (struct sockaddr *) &serv_addr,sizeof(serv_addr)) < 0) //requires socket fd, adress to bind (POINTER) and size of the adress
              error("ERROR on binding");//in case of failure
     listen(sockfd,5);//listen on the socket for connections, second arg must be set to 5
     clilen = sizeof(cli_addr);//client adress size
	//returns a new fd needed to communicate on this connection
     newsockfd = accept(sockfd,(struct sockaddr *)&cli_addr,&clilen);
     if (newsockfd < 0)
          error("ERROR on accept");


	//once connection is established
     bzero(buffer,256);//innitialize the buffer to zeroes
     n = read(newsockfd,buffer,255);// read all characters in socket or 255, whichever is less, returns number of character read
     if (n < 0) error("ERROR reading from socket");
     printf("Here is the message: %s\n",buffer);//print the message on standard output
     n = write(newsockfd,"I got your message",18);//write a message to the client, lst arg is length of message
     if (n < 0) error("ERROR writing to socket");
     close(newsockfd);//CLOSE SOCKETS
     close(sockfd);
     return 0;
}
